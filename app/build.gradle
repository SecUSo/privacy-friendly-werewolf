apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
    compileSdk 34

    namespace 'org.secuso.privacyfriendlywerwolf'
    defaultConfig {
        vectorDrawables.useSupportLibrary = true
        applicationId 'org.secuso.privacyfriendlycardgameone'
        minSdkVersion 21
        targetSdkVersion 34
        versionCode 5
        versionName "1.1.2"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        buildConfig true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }

    kotlin {
        jvmToolchain(17)
    }

    android.applicationVariants.configureEach { variant ->
        variant.outputs.configureEach {
            def appName = "pfa-werewolf"
            outputFileName = appName + "-${variant.name}-v${variant.versionName}.apk"
        }
    }

    lint {
        lintConfig = file("lint.xml")
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        pickFirst 'META-INF/services/javax.ws.rs.ext.MessageBodyReader'
        pickFirst 'META-INF/services/javax.ws.rs.ext.MessageBodyWriter'
        pickFirst 'META-INF/jersey-module-version'
        pickFirst 'META-INF/services/com.sun.jersey.spi.inject.InjectableProvider'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'androidx.appcompat:appcompat:1.0.0'
    testImplementation 'junit:junit:4.12'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    // compile 'com.journeyapps:zxing-android-embedded:3.4.0'
    // compile 'com.github.kenglxn.QRGen:android:2.2.0'
    implementation 'com.koushikdutta.async:androidasync:2.2.1'
    implementation 'com.google.code.gson:gson:2.8.2'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.powermock:powermock:1.6.5'
    testImplementation 'org.powermock:powermock-module-junit4:1.6.5'
    testImplementation 'org.powermock:powermock-api-mockito:1.6.5'

    // Backup
    implementation project(path: ':backup-api')
    def work_version = "2.4.0"
    implementation "androidx.work:work-runtime:$work_version"
    implementation "androidx.work:work-runtime-ktx:$work_version"
    androidTestImplementation "androidx.work:work-testing:$work_version"
    implementation 'androidx.sqlite:sqlite-ktx:2.3.1'

    constraints {
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.0") {
            because("kotlin-stdlib-jdk7 is now a part of kotlin-stdlib")
        }
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.0") {
            because("kotlin-stdlib-jdk8 is now a part of kotlin-stdlib")
        }
    }
}
